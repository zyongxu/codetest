// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mkd.proto

#ifndef PROTOBUF_mkd_2eproto__INCLUDED
#define PROTOBUF_mkd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace acm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mkd_2eproto();
void protobuf_AssignDesc_mkd_2eproto();
void protobuf_ShutdownFile_mkd_2eproto();

class PriceInfo;
class MktData;

enum Side {
  BID = 0,
  ASK = 1
};
bool Side_IsValid(int value);
const Side Side_MIN = BID;
const Side Side_MAX = ASK;
const int Side_ARRAYSIZE = Side_MAX + 1;

const ::google::protobuf::EnumDescriptor* Side_descriptor();
inline const ::std::string& Side_Name(Side value) {
  return ::google::protobuf::internal::NameOfEnum(
    Side_descriptor(), value);
}
inline bool Side_Parse(
    const ::std::string& name, Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
// ===================================================================

class PriceInfo : public ::google::protobuf::Message {
 public:
  PriceInfo();
  virtual ~PriceInfo();

  PriceInfo(const PriceInfo& from);

  inline PriceInfo& operator=(const PriceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceInfo& default_instance();

  void Swap(PriceInfo* other);

  // implements Message ----------------------------------------------

  PriceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriceInfo& from);
  void MergeFrom(const PriceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required .acm.Side side = 3;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 3;
  inline ::acm::Side side() const;
  inline void set_side(::acm::Side value);

  // @@protoc_insertion_point(class_scope:acm.PriceInfo)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_side();
  inline void clear_has_side();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 size_;
  int side_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mkd_2eproto();
  friend void protobuf_AssignDesc_mkd_2eproto();
  friend void protobuf_ShutdownFile_mkd_2eproto();

  void InitAsDefaultInstance();
  static PriceInfo* default_instance_;
};
// -------------------------------------------------------------------

class MktData : public ::google::protobuf::Message {
 public:
  MktData();
  virtual ~MktData();

  MktData(const MktData& from);

  inline MktData& operator=(const MktData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MktData& default_instance();

  void Swap(MktData* other);

  // implements Message ----------------------------------------------

  MktData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MktData& from);
  void MergeFrom(const MktData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 secu_id = 1 [default = 0];
  inline bool has_secu_id() const;
  inline void clear_secu_id();
  static const int kSecuIdFieldNumber = 1;
  inline ::google::protobuf::int32 secu_id() const;
  inline void set_secu_id(::google::protobuf::int32 value);

  // optional string instrument = 2 [default = ""];
  inline bool has_instrument() const;
  inline void clear_instrument();
  static const int kInstrumentFieldNumber = 2;
  inline const ::std::string& instrument() const;
  inline void set_instrument(const ::std::string& value);
  inline void set_instrument(const char* value);
  inline void set_instrument(const char* value, size_t size);
  inline ::std::string* mutable_instrument();
  inline ::std::string* release_instrument();
  inline void set_allocated_instrument(::std::string* instrument);

  // repeated .acm.PriceInfo quotes = 3;
  inline int quotes_size() const;
  inline void clear_quotes();
  static const int kQuotesFieldNumber = 3;
  inline const ::acm::PriceInfo& quotes(int index) const;
  inline ::acm::PriceInfo* mutable_quotes(int index);
  inline ::acm::PriceInfo* add_quotes();
  inline const ::google::protobuf::RepeatedPtrField< ::acm::PriceInfo >&
      quotes() const;
  inline ::google::protobuf::RepeatedPtrField< ::acm::PriceInfo >*
      mutable_quotes();

  // @@protoc_insertion_point(class_scope:acm.MktData)
 private:
  inline void set_has_secu_id();
  inline void clear_has_secu_id();
  inline void set_has_instrument();
  inline void clear_has_instrument();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* instrument_;
  ::google::protobuf::RepeatedPtrField< ::acm::PriceInfo > quotes_;
  ::google::protobuf::int32 secu_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mkd_2eproto();
  friend void protobuf_AssignDesc_mkd_2eproto();
  friend void protobuf_ShutdownFile_mkd_2eproto();

  void InitAsDefaultInstance();
  static MktData* default_instance_;
};
// ===================================================================


// ===================================================================

// PriceInfo

// required int32 price = 1;
inline bool PriceInfo::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceInfo::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 PriceInfo::price() const {
  return price_;
}
inline void PriceInfo::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// required int32 size = 2;
inline bool PriceInfo::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceInfo::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PriceInfo::size() const {
  return size_;
}
inline void PriceInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required .acm.Side side = 3;
inline bool PriceInfo::has_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PriceInfo::set_has_side() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PriceInfo::clear_has_side() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PriceInfo::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline ::acm::Side PriceInfo::side() const {
  return static_cast< ::acm::Side >(side_);
}
inline void PriceInfo::set_side(::acm::Side value) {
  assert(::acm::Side_IsValid(value));
  set_has_side();
  side_ = value;
}

// -------------------------------------------------------------------

// MktData

// optional int32 secu_id = 1 [default = 0];
inline bool MktData::has_secu_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MktData::set_has_secu_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MktData::clear_has_secu_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MktData::clear_secu_id() {
  secu_id_ = 0;
  clear_has_secu_id();
}
inline ::google::protobuf::int32 MktData::secu_id() const {
  return secu_id_;
}
inline void MktData::set_secu_id(::google::protobuf::int32 value) {
  set_has_secu_id();
  secu_id_ = value;
}

// optional string instrument = 2 [default = ""];
inline bool MktData::has_instrument() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MktData::set_has_instrument() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MktData::clear_has_instrument() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MktData::clear_instrument() {
  if (instrument_ != &::google::protobuf::internal::kEmptyString) {
    instrument_->clear();
  }
  clear_has_instrument();
}
inline const ::std::string& MktData::instrument() const {
  return *instrument_;
}
inline void MktData::set_instrument(const ::std::string& value) {
  set_has_instrument();
  if (instrument_ == &::google::protobuf::internal::kEmptyString) {
    instrument_ = new ::std::string;
  }
  instrument_->assign(value);
}
inline void MktData::set_instrument(const char* value) {
  set_has_instrument();
  if (instrument_ == &::google::protobuf::internal::kEmptyString) {
    instrument_ = new ::std::string;
  }
  instrument_->assign(value);
}
inline void MktData::set_instrument(const char* value, size_t size) {
  set_has_instrument();
  if (instrument_ == &::google::protobuf::internal::kEmptyString) {
    instrument_ = new ::std::string;
  }
  instrument_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MktData::mutable_instrument() {
  set_has_instrument();
  if (instrument_ == &::google::protobuf::internal::kEmptyString) {
    instrument_ = new ::std::string;
  }
  return instrument_;
}
inline ::std::string* MktData::release_instrument() {
  clear_has_instrument();
  if (instrument_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instrument_;
    instrument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MktData::set_allocated_instrument(::std::string* instrument) {
  if (instrument_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_;
  }
  if (instrument) {
    set_has_instrument();
    instrument_ = instrument;
  } else {
    clear_has_instrument();
    instrument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .acm.PriceInfo quotes = 3;
inline int MktData::quotes_size() const {
  return quotes_.size();
}
inline void MktData::clear_quotes() {
  quotes_.Clear();
}
inline const ::acm::PriceInfo& MktData::quotes(int index) const {
  return quotes_.Get(index);
}
inline ::acm::PriceInfo* MktData::mutable_quotes(int index) {
  return quotes_.Mutable(index);
}
inline ::acm::PriceInfo* MktData::add_quotes() {
  return quotes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::acm::PriceInfo >&
MktData::quotes() const {
  return quotes_;
}
inline ::google::protobuf::RepeatedPtrField< ::acm::PriceInfo >*
MktData::mutable_quotes() {
  return &quotes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace acm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acm::Side>() {
  return ::acm::Side_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mkd_2eproto__INCLUDED
