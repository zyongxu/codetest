// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mkd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mkd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace acm {

namespace {

const ::google::protobuf::Descriptor* PriceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MktData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MktData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Side_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mkd_2eproto() {
  protobuf_AddDesc_mkd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mkd.proto");
  GOOGLE_CHECK(file != NULL);
  PriceInfo_descriptor_ = file->message_type(0);
  static const int PriceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, side_),
  };
  PriceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceInfo_descriptor_,
      PriceInfo::default_instance_,
      PriceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceInfo));
  MktData_descriptor_ = file->message_type(1);
  static const int MktData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktData, secu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktData, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktData, quotes_),
  };
  MktData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MktData_descriptor_,
      MktData::default_instance_,
      MktData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MktData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MktData));
  Side_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mkd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceInfo_descriptor_, &PriceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MktData_descriptor_, &MktData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mkd_2eproto() {
  delete PriceInfo::default_instance_;
  delete PriceInfo_reflection_;
  delete MktData::default_instance_;
  delete MktData_reflection_;
}

void protobuf_AddDesc_mkd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmkd.proto\022\003acm\"A\n\tPriceInfo\022\r\n\005price\030\001"
    " \002(\005\022\014\n\004size\030\002 \002(\005\022\027\n\004side\030\003 \002(\0162\t.acm.S"
    "ide\"S\n\007MktData\022\022\n\007secu_id\030\001 \001(\005:\0010\022\024\n\nin"
    "strument\030\002 \001(\t:\000\022\036\n\006quotes\030\003 \003(\0132\016.acm.P"
    "riceInfo*\030\n\004Side\022\007\n\003BID\020\000\022\007\n\003ASK\020\001", 194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mkd.proto", &protobuf_RegisterTypes);
  PriceInfo::default_instance_ = new PriceInfo();
  MktData::default_instance_ = new MktData();
  PriceInfo::default_instance_->InitAsDefaultInstance();
  MktData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mkd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mkd_2eproto {
  StaticDescriptorInitializer_mkd_2eproto() {
    protobuf_AddDesc_mkd_2eproto();
  }
} static_descriptor_initializer_mkd_2eproto_;
const ::google::protobuf::EnumDescriptor* Side_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Side_descriptor_;
}
bool Side_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PriceInfo::kPriceFieldNumber;
const int PriceInfo::kSizeFieldNumber;
const int PriceInfo::kSideFieldNumber;
#endif  // !_MSC_VER

PriceInfo::PriceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceInfo::InitAsDefaultInstance() {
}

PriceInfo::PriceInfo(const PriceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceInfo::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  size_ = 0;
  side_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceInfo::~PriceInfo() {
  SharedDtor();
}

void PriceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceInfo_descriptor_;
}

const PriceInfo& PriceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mkd_2eproto();
  return *default_instance_;
}

PriceInfo* PriceInfo::default_instance_ = NULL;

PriceInfo* PriceInfo::New() const {
  return new PriceInfo;
}

void PriceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0;
    size_ = 0;
    side_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_side;
        break;
      }

      // required .acm.Side side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acm::Side_IsValid(value)) {
            set_side(static_cast< ::acm::Side >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->price(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // required .acm.Side side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->side(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // required .acm.Side side = 3;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->side(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required .acm.Side side = 3;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceInfo::MergeFrom(const PriceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceInfo::CopyFrom(const PriceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PriceInfo::Swap(PriceInfo* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(size_, other->size_);
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceInfo_descriptor_;
  metadata.reflection = PriceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MktData::kSecuIdFieldNumber;
const int MktData::kInstrumentFieldNumber;
const int MktData::kQuotesFieldNumber;
#endif  // !_MSC_VER

MktData::MktData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MktData::InitAsDefaultInstance() {
}

MktData::MktData(const MktData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MktData::SharedCtor() {
  _cached_size_ = 0;
  secu_id_ = 0;
  instrument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MktData::~MktData() {
  SharedDtor();
}

void MktData::SharedDtor() {
  if (instrument_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_;
  }
  if (this != default_instance_) {
  }
}

void MktData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MktData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MktData_descriptor_;
}

const MktData& MktData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mkd_2eproto();
  return *default_instance_;
}

MktData* MktData::default_instance_ = NULL;

MktData* MktData::New() const {
  return new MktData;
}

void MktData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secu_id_ = 0;
    if (has_instrument()) {
      if (instrument_ != &::google::protobuf::internal::kEmptyString) {
        instrument_->clear();
      }
    }
  }
  quotes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MktData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 secu_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secu_id_)));
          set_has_secu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instrument;
        break;
      }

      // optional string instrument = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument().data(), this->instrument().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quotes;
        break;
      }

      // repeated .acm.PriceInfo quotes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quotes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quotes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quotes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MktData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 secu_id = 1 [default = 0];
  if (has_secu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->secu_id(), output);
  }

  // optional string instrument = 2 [default = ""];
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument(), output);
  }

  // repeated .acm.PriceInfo quotes = 3;
  for (int i = 0; i < this->quotes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quotes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MktData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 secu_id = 1 [default = 0];
  if (has_secu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->secu_id(), target);
  }

  // optional string instrument = 2 [default = ""];
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument(), target);
  }

  // repeated .acm.PriceInfo quotes = 3;
  for (int i = 0; i < this->quotes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quotes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MktData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 secu_id = 1 [default = 0];
    if (has_secu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secu_id());
    }

    // optional string instrument = 2 [default = ""];
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument());
    }

  }
  // repeated .acm.PriceInfo quotes = 3;
  total_size += 1 * this->quotes_size();
  for (int i = 0; i < this->quotes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quotes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MktData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MktData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MktData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MktData::MergeFrom(const MktData& from) {
  GOOGLE_CHECK_NE(&from, this);
  quotes_.MergeFrom(from.quotes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secu_id()) {
      set_secu_id(from.secu_id());
    }
    if (from.has_instrument()) {
      set_instrument(from.instrument());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MktData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MktData::CopyFrom(const MktData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MktData::IsInitialized() const {

  for (int i = 0; i < quotes_size(); i++) {
    if (!this->quotes(i).IsInitialized()) return false;
  }
  return true;
}

void MktData::Swap(MktData* other) {
  if (other != this) {
    std::swap(secu_id_, other->secu_id_);
    std::swap(instrument_, other->instrument_);
    quotes_.Swap(&other->quotes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MktData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MktData_descriptor_;
  metadata.reflection = MktData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace acm

// @@protoc_insertion_point(global_scope)
