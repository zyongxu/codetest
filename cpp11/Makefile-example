#-----------variables and expressions-----------------------------------------------------------------#
# A variable is a name defined in a makefile to represent a STRING of text
#
# $@:		the name of the target
# $+:		all prerequisites, space-separated
# $<:		the name of the first prerequisite
# $(@D):	the directory part of the file name of the target, with the trailing slash removed
# Make directory search path:
#
# String manipulation:
# 	1. '%': the wildcard in <pattern>, matching any number of any characters within a word.
# 	        the % appeared in <replacement>  will be replaced by the matched text in <pattern>
#
# Appending Text to Variables:
# '+=' takes the value of the variable on the lhs, and adds the text on the rhs to it (preceded by a single space).
# Thus:
#      objects = main.o foo.o bar.o utils.o
#      objects += another.o
#
# sets objects to 'main.o foo.o bar.o utils.o another.o'
# '=' vs ':' -- http://stackoverflow.com/questions/448910/makefile-variable-assignment
#------------------------------------------------------------------------------------------------------#

# list all subdirs need to be compiled here (no back-slash at the end!):
MODULES := 

# Progarm for compiling C++ programs; default 'g++'
CXX = g++47
# Extra flags to give to the C++ compiler.
CXXFLAGS := -std=c++11 -Wall
# Extra flags to give to compilers when they are supposed to invoke the linker, 'ld'
LDFLAGS = -Wall "-Wl,-rpath,/usr/local/lib/gcc47/"
OPTIMIZE = 
LDLIBS = -L/usr/local/include

SRC_ROOT_DIR = src/
SRC_DIR := $(addprefix $(SRC_ROOT_DIR), $(MODULES))
SRC_DIR += $(SRC_ROOT_DIR)
OUT_DIR = bin/
SRC := $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.cpp))
OBJ := $(patsubst src/%.cpp,bin/%.o,$(SRC))
CXXFLAGS += $(addprefix -I,$(SRC_DIR))
dir_guard = mkdir -p $(@D)

# list of all source files (without any dir or path)
#SRC := $(notdir $(wildcard *.cpp))

# VPATH is different from vpath! vpath specifies the type of the file to be searched
vpath %.cpp $(SRC_DIR)

#-------------------------------------------------
# 'define': define multi-line variables!
# syntax:
# 		define var-name:
# 			var body
# 			...
# 		endef
#
# usage: $(call variable, param1, param2, ...)
#    $(1) will be expaned to param1, and so on
# ALWASY double escape variables inside define block,
# excpet for arguments. http://stackoverflow.com/questions/2421518/gnu-make-how-to-call-wildcard-within-eval
#-------------------------------------------------
define compile-rule =
$(1)/%.o: %.cpp
	$$(CXX) $$(CXXFLAGS) -c $$<
endef

#--------------------------------------------
# Make rules
#--------------------------------------------
.PHONY: all
all: atomic_check

atomic_check: $(OBJ)
	$(CXX) $(LDFLAGS) $^ -o $@ $(LDLIBS) $(OPTIMIZE)

.PHONY: clean
clean:
	rm -rf $(OUTPUT_DIR)

# 'eval' function:
# 'call' function:
$(foreach odir,$(OUT_DIR),$(eval $(call compile-rule,$(odir))))
